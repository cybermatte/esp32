esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: esp-idf

esphome:
  name: ${name}
  name_add_mac_suffix: false
  friendly_name: ${friendly_name}

  on_boot:
    priority: 80
    then:
      - lambda: ESP_LOGD("boot", "Running on_boot automation.");
      - fan.turn_on:
          id: reversible_fan
          speed: 49
      - lambda: ESP_LOGD("boot", "Fan set to 49% speed (STOPPED).");

button:
  - platform: restart
    name: "Restart device"
  - platform: factory_reset
    name: "Factory reset"
    disabled_by_default: True

sensor:
  - platform: pulse_counter
    pin: GPIO14  # Replace with the tachometer signal pin
    name: "Fan RPM"
    unit_of_measurement: "RPM"
    update_interval: 30s
    filters:
      - multiply: 0.5  # If your fan outputs 2 pulses per revolution

# -----------------------------------------------------------
# PWM Output for Fan Speed and Direction Control
# -----------------------------------------------------------
output:
  - platform: ledc
    pin: GPIO13
    id: fan_pwm_output
    frequency: 25000 Hz

globals:
  - id: fan_speed
    type: float
    initial_value: '0.49'

fan:
  - platform: template
    name: "OD1238 Reversible Fan"
    id: reversible_fan
    #internal: true  # âœ… This hides the entity from Home Assistant
    speed_count: 100
    on_turn_on:
      - logger.log: "Fan turned on"
    on_turn_off:
      - logger.log: "Fan turned off"
    on_speed_set:
      - lambda: |-
          id(fan_speed) = x / 100.0;
          ESP_LOGD("fan", "Fan speed: %.2f", id(fan_speed));

          if (abs(id(fan_speed)) == 0.49) {
            ESP_LOGD("fan", "Direction: STOPPED");
          } else if (id(fan_speed) < 0.49) {
            ESP_LOGD("fan", "Direction: FORWARD");
          } else {
            ESP_LOGD("fan", "Direction: REVERSE");
          }
      - output.set_level:
          id: fan_pwm_output
          level: !lambda 'return id(fan_speed);'

select:
  - platform: template
    name: "Fan Direction Preset"
    options:
      - Forward
      - Reverse
      - Stop
    initial_option: Stop
    optimistic: true
    on_value:
      then:
        - lambda: |-
            if (x == "Forward") {
               auto call = id(reversible_fan).turn_on();
               call.set_speed(45);
               call.perform();
               ESP_LOGD("fan", "Direction: FORWARD");
             } else if (x == "Stop") {
               auto call = id(reversible_fan).turn_on();
               call.set_speed(49);
               call.perform();
               ESP_LOGD("fan", "Direction: STOPPED");
             } else {
               auto call = id(reversible_fan).turn_on();
               call.set_speed(57);
               call.perform();
               ESP_LOGD("fan", "Direction: REVERSE");
            }
