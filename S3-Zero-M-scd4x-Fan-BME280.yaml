#Runs on S3-Zero-M
#With a scd4x
#controlling a OD1238 Reversible Fan https://orionfans.com/productFiles/datasheet/OD1238-REVERSIBLE.pdf
#With a BME280
#And a binary "door" sensor

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: esp-idf

esphome:
  name: ${name}
  name_add_mac_suffix: false
  friendly_name: ${friendly_name}

  on_boot:
    priority: 80
    then:
      - lambda: ESP_LOGD("boot", "Running on_boot automation.");
      - fan.turn_on:
          id: reversible_fan
          speed: 49
      - lambda: ESP_LOGD("boot", "Fan set to 49% speed (STOPPED).");

esp32_ble_tracker:
  scan_parameters:
    interval: 1100ms
    window: 1100ms
    active: true

button:
  - platform: restart
    name: "Restart device"
  - platform: factory_reset
    name: "Factory reset"
    disabled_by_default: True

bluetooth_proxy:
  active: true

# -----------------------------------------------------------
# I2C Bus Configurations (Combined into one block)
# -----------------------------------------------------------
i2c:
  # I2C Bus for BMP280
  - id: bus_b
    sda: GPIO9 # Connect BMP280 SDA to GPIO9
    scl: GPIO10 # Connect BMP280 SCL to GPIO10
    scan: true

  # I2C Bus for SCD4x (Original Pins)
  - id: scd4x_i2c_bus
    sda: GPIO1 # Connect SCD4x SDA to GPIO1
    scl: GPIO2 # Connect SCD4x SCL to GPIO2
    scan: true


# -----------------------------------------------------------
# Sensors
# -----------------------------------------------------------
binary_sensor:
  - platform: gpio
    pin:
      number: GPIO7
      mode: INPUT_PULLUP
    name: "Door sensor"
    device_class: door
    filters:
      - delayed_on: 50ms
      - delayed_off: 50ms
    internal: false

sensor:
  # SCD4x CO2, Temperature, and Humidity Sensor
  - platform: scd4x
    id: scd4x_platform
    i2c_id: scd4x_i2c_bus
    address: 0x62 # Default address for SCD4x
    update_interval: 60s # The SCD4x will perform measurements every 60 seconds internally

    co2:
      name: "CO2"
      id: co2_sensor_id
      accuracy_decimals: 0
    temperature:
      name: "Temperature" 
      id: temperature_sensor_id
      accuracy_decimals: 2
      unit_of_measurement: "°C"
    humidity:
      name: "Humidity" 
      id: humidity_sensor_id
      accuracy_decimals: 2
      unit_of_measurement: "%"

    # BMP280 Temperature, Pressure, and Humidity
  - platform: bmp280_i2c # Changed from bmp280_i2c to BMP280_i2c
    i2c_id: bus_b
    address: 0x77 # Assuming 0x76 for BMP280, please verify this (could be 0x77)
    update_interval: 60s
    temperature:
      name: "Fan Temperature" 
      id: bmp280_temperature # ID name kept for consistency
      accuracy_decimals: 2
      oversampling: 16x
      filters:
        - exponential_moving_average:
            alpha: 0.1
            send_first_at: 1
      unit_of_measurement: "°C"
    pressure:
      name: "Pressure" 
      id: BMP280_pressure
      oversampling: 16x
      filters:
        - exponential_moving_average:
            alpha: 0.1
            send_first_at: 1
      unit_of_measurement: "hPa"

  - platform: pulse_counter
    pin: GPIO6  # Replace with the tachometer signal pin
    name: "Fan RPM"
    unit_of_measurement: "RPM"
    update_interval: 30s
    filters:
      - multiply: 0.5  # If your fan outputs 2 pulses per revolution

# -----------------------------------------------------------
# PWM Output for Fan Speed and Direction Control
# -----------------------------------------------------------
output:
  - platform: ledc
    pin: GPIO5
    id: fan_pwm_output
    frequency: 25000 Hz

globals:
  - id: fan_speed
    type: float
    initial_value: '0.49'

fan:
  - platform: template
    name: "OD1238 Reversible Fan"
    #https://orionfans.com/productFiles/datasheet/OD1238-REVERSIBLE.pdf
    id: reversible_fan
    #internal: true  # ✅ This hides the entity from Home Assistant
    speed_count: 100
    on_turn_on:
      - logger.log: "Fan turned on"
    on_turn_off:
      - logger.log: "Fan turned off"
    on_speed_set:
      - lambda: |-
          id(fan_speed) = x / 100.0;
          ESP_LOGD("fan", "Fan speed: %.2f", id(fan_speed));

          if (abs(id(fan_speed)) == 0.49) {
            ESP_LOGD("fan", "Direction: STOPPED");
          } else if (id(fan_speed) < 0.49) {
            ESP_LOGD("fan", "Direction: FORWARD");
          } else {
            ESP_LOGD("fan", "Direction: REVERSE");
          }
      - output.set_level:
          id: fan_pwm_output
          level: !lambda 'return id(fan_speed);'

select:
  - platform: template
    name: "Fan Direction Preset"
    options:
      - Forward
      - Reverse
      - Stop
    initial_option: Stop
    optimistic: true
    on_value:
      then:
        - lambda: |-
            if (x == "Forward") {
               auto call = id(reversible_fan).turn_on();
               call.set_speed(45);
               call.perform();
               ESP_LOGD("fan", "Direction: FORWARD");
             } else if (x == "Stop") {
               auto call = id(reversible_fan).turn_on();
               call.set_speed(49);
               call.perform();
               ESP_LOGD("fan", "Direction: STOPPED");
             } else {
               auto call = id(reversible_fan).turn_on();
               call.set_speed(57);
               call.perform();
               ESP_LOGD("fan", "Direction: REVERSE");
            }
