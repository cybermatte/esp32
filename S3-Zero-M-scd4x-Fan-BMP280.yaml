esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: esp-idf

esp32_ble_tracker:
  scan_parameters:
    interval: 1100ms
    window: 1100ms
    active: true

button:
  - platform: restart
    name: "Restart device"
  - platform: factory_reset
    name: "Factory reset"
    disabled_by_default: True

bluetooth_proxy:
  active: true

# I2C Bus Configuration (for SCD4x)
i2c:
  sda: GPIO1
  scl: GPIO2
  scan: true
  id: scd4x_i2c_bus

# 3. Configure your SCD4x sensor
sensor:
  - platform: scd4x
    id: scd4x_platform
    i2c_id: scd4x_i2c_bus
    address: 0x62
    update_interval: 10s # The SCD4x will perform measurements every 60 seconds internally

    co2:
      name: "CO2"
      id: co2_sensor_id
      accuracy_decimals: 0

    temperature:
      name: "Temperature"
      id: temperature_sensor_id
      accuracy_decimals: 2

    humidity:
      name: "Humidity"
      id: humidity_sensor_id
      accuracy_decimals: 2

# -----------------------------------------------------------
# PWM Output for Fan Speed and Direction Control
# -----------------------------------------------------------
output:
  # PWM output for controlling fan speed and direction (connected to Fan's PWM_IN pin)
  - platform: ledc
    pin: GPIO5 # <--- Ensure this is the ESP32 GPIO connected to the fan's PWM_IN pin
    id: fan_pwm_output
    frequency: 25000 Hz # Crucial: Set to 25kHz as per fan datasheet
    # The actual duty cycle will be controlled by the fan component below


  # Direction control pins (connected to L298N IN1 and IN2 pins)
  # These also need to be LEDC (PWM) outputs for the hbridge platform,
  # even though they might only be driven HIGH/LOW internally by the hbridge component.
  - platform: ledc #  CHANGED TO LEDC
    pin: GPIO3 # - Ensure this is your L298N IN1 pin (Pin A)
    id: motor_in1_pin
    frequency: 1000 Hz # Must match the frequency of the enable_pin if used in same channel group (good practice)
    max_power: 1.0 # These will be driven as 0% or 100% by the hbridge component

  - platform: ledc #  CHANGED TO LEDC
    pin: GPIO4 # - Ensure this is your L298N IN2 pin (Pin B)
    id: motor_in2_pin
    frequency: 1000 Hz # Must match the frequency of the enable_pin
    max_power: 1.0 # These will be driven as 0% or 100% by the hbridge component

# -----------------------------------------------------------
# Fan Component - Uses the hbridge platform
# -----------------------------------------------------------
fan:
  - platform: hbridge
    id: reversible_fan # Unique ID for your fan
    name: "S3 Zero M Fan" # Name that will appear in Home Assistant

    # Link to the output IDs defined above
    pin_a: motor_in1_pin
    pin_b: motor_in2_pin
    enable_pin: motor_pwm_pin # Use the PWM output for speed control

    decay_mode: slow # 'slow' (coasting) or 'fast' (braking) when changing speed or stopping
    # speed_count: 100 # Optional: Defines number of speed steps (1-255 by default).
                      # If uncommented, Home Assistant will show a slider with this many steps.
                      # Otherwise, it defaults to 255 steps.

# -----------------------------------------------------------
# Text Sensor (Optional) - For debugging or displaying current fan state
# -----------------------------------------------------------
text_sensor:
  - platform: template
    name: "Fan Status Debug"
    lambda: |-
      // Check if the fan's speed is greater than 0.0 (i.e., it's "on")
      if (id(reversible_fan).speed > 0.0F) {  return "On - Speed: " + to_string(id(reversible_fan).speed * 100.0F) + "%";
      } else {
        return std::string("Off"); 
      }
    update_interval: 1s
